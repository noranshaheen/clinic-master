<?php

namespace App\Models\ETA;

use Illuminate\Support\Facades\DB;

//use App\Models\Item;

/**
 * Eloquent class to describe the InvoiceLine table.
 *
 * automatically generated by ModelGenerator.php
 */
class InvoiceLine extends \Illuminate\Database\Eloquent\Model
{
    protected $table = 'InvoiceLine';

    public $primaryKey = 'Id';
    //protected $appends = ['item'];

    protected $fillable = ['description', 'itemType', 'itemCode', 'unitType', 'quantity', 'internalCode', 'salesTotal',
        'total', 'valueDifference', 'totalTaxableFees', 'netTotal', 'itemsDiscount', 'invoice_id'];

    public function discount()
    {
        return $this->belongsTo('App\Models\ETA\Discount', 'discount_id', 'Id');
    }

    //public function getItemAttribute()
    public function item()
    {
        //return Item::firstWhere('itemCode', $this->itemCode);
        return $this->belongsTo('App\Models\ETA\ETAItem', 'itemCode', 'itemCode');
    }

    public function invoice()
    {
        return $this->belongsTo('App\Models\ETA\Invoice', 'invoice_id', 'Id');
    }

    public function unitValue()
    {
        return $this->belongsTo('App\Models\ETA\Value', 'unitValue_id', 'Id');
    }

    public function taxableItems()
    {
        return $this->hasMany('App\Models\ETA\TaxableItem', 'invoiceline_id', 'Id');
    }

    public function topItemsStats($hasFilter = false)
    {

        $query = $this
            ->select(DB::raw("ETAItems.codeNamePrimaryLang as name, sum(InvoiceLine.salesTotal) as value"))
            ->join('ETAItems', 'InvoiceLine.itemCode', '=', 'ETAItems.itemCode');

        if ($hasFilter) {
            $query->join('invoice', 'invoice.id', '=', 'InvoiceLine.invoice_id')
                ->whereIn('invoice.status', request('statusList'));
        }

        return $query->groupByRaw('ETAItems.codeNamePrimaryLang')
            ->orderBy('value', 'desc')
            ->limit(10)
            ->get();
    }
}
